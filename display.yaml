esphome:
  name: esphome-web-07de39
  on_boot:
    priority: -10
    then:
      - delay: 60s
      - component.update: epaperdisplay
ota:

api:

rp2040:
  board: rpipicow
  framework:
    platform_version: https://github.com/maxgerhardt/platform-raspberrypi.git

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true

logger:
  level: DEBUG

time:
  - platform: homeassistant
    id: homeassistant_time
  - platform: sntp
    # ...
    on_time:
      - hours: 7,8,11,12,13,14,15,16,17,18,19,20,21,22,23,0
        then:
          - component.update: epaperdisplay

# Include custom fonts
font:
  - file: 'GothamRnd-Bold.ttf'
    id: font_title
    size: 52
    glyphs: '!"%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz''&/'
  - file: 'GothamRnd-Bold.ttf'
    id: font_medium_bold
    size: 33
    glyphs: '!"%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz''&/'
  - file: 'GothamRnd-Bold.ttf'
    id: font_small_bold
    size: 25
    glyphs: '!"%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz''&/'

  - file: 'materialdesignicons-webfont.ttf'
    id: font_mdi_large
    size: 25
    glyphs: &mdi-weather-glyphs
    - "\U000F0F36"
    - "\U000F0599"
    - "\U000F0238"
    - "\U000F0717"
    - "\U000F1A7F"
    - "\U000F140B"
    - "\U000F1719"

sensor:
  - platform: homeassistant
    entity_id: sensor.jonathan_bedroom_sensor_temperature
    id: room_temp
    internal: true

  - platform: homeassistant
    entity_id: sensor.mostigen_1_genarp_outdoor_temperature
    id: outside_temp
    internal: true

  - platform: homeassistant
    entity_id: sensor.nordpool_kwh_se4_sek_2_10_025
    id: electricity_price
    internal: true

  - platform: homeassistant
    entity_id: sensor.jonathan_bedroom_sensor_humidity
    id: room_Humidity
    internal: true

  - platform: homeassistant
    entity_id: sensor.monthly_net_consumption_mostigen_1
    id: kwh_Used
    internal: true

  - platform: homeassistant
    entity_id: sensor.monthly_cost_mostigen_1
    id: kwh_Used_price
    internal: true

graph:
  # Show bare-minimum auto-ranged graph
  - id: single_temperature_graph
    sensor: room_temp
    duration: 1h
    width: 151
    height: 51

spi:
  clk_pin: 10
  mosi_pin: 11  #DIN

display:
  - platform: waveshare_epaper
    id: epaperdisplay
    cs_pin: 4
    dc_pin: 8
    #update_interval: 1h
    busy_pin: 13
    reset_pin: 12
    reset_duration: 2ms
    rotation: 90°

    model: 7.50in-bv2
    lambda: |-

        //Variables
        float outsideTemp = id(outside_temp).state;
        float roomTemp = id(room_temp).state;
        float roomHumidity = id(room_Humidity).state;
        float kwhUsed = id(kwh_Used).state;
        float kwhUsedPrice = id(kwh_Used_price).state;
        float electricityPrice = id(electricity_price).state;

        int y = 50;
        int offset = 65;
        it.fill(COLOR_ON);
        it.printf(240, y, id(font_title), COLOR_OFF, TextAlign::TOP_CENTER, "Today's date");
        it.strftime(240, y + offset, id(font_small_bold), COLOR_OFF, TextAlign::TOP_CENTER, "%d of %B %Y", id(homeassistant_time).now());

        //outside temp
        it.printf(240, y + offset*2, id(font_medium_bold), COLOR_OFF, TextAlign::TOP_CENTER, "Today's weather");
        it.printf(240, y + offset*3, id(font_small_bold), COLOR_OFF, TextAlign::TOP_CENTER, "%.1f°C outside", outsideTemp);

        auto tempOutsideIcon = "";
        if(outsideTemp < 10.0){
          tempOutsideIcon = "\U000F0F36";
        } else if(outsideTemp > 10.0 && outsideTemp < 23.0){
          tempOutsideIcon = "\U000F0599";
        } else{
          tempOutsideIcon = "\U000F0238";
        }

        it.printf(140, y + offset*3, id(font_mdi_large), COLOR_OFF, TextAlign::TOP_CENTER, "%s", tempOutsideIcon);

        //Room temp & humidity
        it.printf(240, y + offset*4, id(font_medium_bold), COLOR_OFF, TextAlign::TOP_CENTER, "Room temperature");
        it.printf(260, y + offset*5, id(font_small_bold), COLOR_OFF, TextAlign::TOP_CENTER, "%.1f°C & %.1f%% humidity", roomTemp, roomHumidity);

        auto tempRoomIcon = "";
        if(roomTemp < 19.0){
          tempRoomIcon = "\U000F0717";
        } else if (roomTemp > 19.0 && roomTemp < 26.0){
          tempRoomIcon = "\U000F1719";
        } else{
          tempRoomIcon = "\U000F0238";
        }
        it.printf(90, y + offset*5, id(font_mdi_large), COLOR_OFF, TextAlign::TOP_CENTER, "%s", tempRoomIcon);

        //Electricity
        it.printf(240, y + offset*6, id(font_medium_bold), COLOR_OFF, TextAlign::TOP_CENTER, "Electricity price");
        it.printf(240, y + offset*7, id(font_small_bold), COLOR_OFF, TextAlign::TOP_CENTER, "%.1f kr/kwh", electricityPrice);
        it.printf(240, y + offset*8, id(font_small_bold), COLOR_OFF, TextAlign::TOP_CENTER, "%.1f kwh used this month", kwhUsed);
        it.printf(240, y + offset*8.5, id(font_small_bold), COLOR_OFF, TextAlign::TOP_CENTER, "for %0.1f kr", kwhUsedPrice);

        it.printf(160, y + offset*7, id(font_mdi_large), COLOR_OFF, TextAlign::TOP_CENTER, "%s", "\U000F140B");

        it.graph(240, y + offset*10, id(single_temperature_graph));


        //Last updated
        it.strftime(240, 800 - 25, id(font_small_bold), COLOR_OFF, TextAlign::TOP_CENTER, "Last updated %X", id(homeassistant_time).now());